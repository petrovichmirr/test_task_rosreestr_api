# This is the main Apache server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See http://httpd.apache.org/docs/2.4/ for detailed information about
# the directives and /usr/share/doc/apache2/README.Debian about Debian specific
# hints.
#
#
# Summary of how the Apache 2 configuration works in Debian:
# The Apache 2 web server configuration in Debian is quite different to
# upstream's suggested way to configure the web server. This is because Debian's
# default Apache2 installation attempts to make adding and removing modules,
# virtual hosts, and extra configuration directives as flexible as possible, in
# order to make automating the changes and administering the server as easy as
# possible.

# It is split into several files forming the configuration hierarchy outlined
# below, all located in the /etc/apache2/ directory:
#
#	/etc/apache2/
#	|-- apache2.conf
#	|	`--  ports.conf
#	|-- mods-enabled
#	|	|-- *.load
#	|	`-- *.conf
#	|-- conf-enabled
#	|	`-- *.conf
# 	`-- sites-enabled
#	 	`-- *.conf
#
#
# * apache2.conf is the main configuration file (this file). It puts the pieces
#   together by including all remaining configuration files when starting up the
#   web server.
#
# * ports.conf is always included from the main configuration file. It is
#   supposed to determine listening ports for incoming connections which can be
#   customized anytime.
#
# * Configuration files in the mods-enabled/, conf-enabled/ and sites-enabled/
#   directories contain particular configuration snippets which manage modules,
#   global configuration fragments, or virtual host configurations,
#   respectively.
#
#   They are activated by symlinking available configuration files from their
#   respective *-available/ counterparts. These should be managed by using our
#   helpers a2enmod/a2dismod, a2ensite/a2dissite and a2enconf/a2disconf. See
#   their respective man pages for detailed information.
#
# * The binary is called apache2. Due to the use of environment variables, in
#   the default configuration, apache2 needs to be started/stopped with
#   /etc/init.d/apache2 or apache2ctl. Calling /usr/bin/apache2 directly will not
#   work with the default configuration.


# Global configuration
#

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# NOTE!  If you intend to place this on an NFS (or otherwise network)
# mounted filesystem then please read the Mutex documentation (available
# at <URL:http://httpd.apache.org/docs/2.4/mod/core.html#mutex>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
#ServerRoot "/etc/apache2"

#ServerName 127.0.1.1

#
# The accept serialization lock file MUST BE STORED ON A LOCAL DISK.
#
#Mutex file:${APACHE_LOCK_DIR} default

#
# The directory where shm and other runtime files will be stored.
#

DefaultRuntimeDir ${APACHE_RUN_DIR}

#
# PidFile: The file in which the server should record its process
# identification number when it starts.
# This needs to be set in /etc/apache2/envvars
#
PidFile ${APACHE_PID_FILE}

# Директива Timeout задет количество секунд, в течение которых Apache будет ждать
# завершения обработки операций ввода или вывода для запроса перед отказом клиенту.
# По истечении этого времени, если процесс не завершится, Apache выдаст отказ в
# обработке запроса по таймауту.
#
# По умолчанию значение установлено как 5 минут, что вполне достаточно для работы
# большинства скриптов и для получения входящих данных.
# Если у вас нет "тяжелых" сценариев, то можно это время уменьшить, например,
# до 180 секунд (3 минуты).
Timeout 300

# Директива KeepAlive определяет разрешать или нет удержание соединения с
# клиентом в активном состоянии, для выполнения нескольких запросов.
#
# По умолчанию, значение директивы ON, что заставляет Apache удерживать активным
# соединение с клиентом и позволяет за одно соединение выполнить несколько
# запросов.
# Если значение KeepAlive будет установлено в Off, то за одно соединение будет
# выполнен только один запрос, после которого соединение будет тут же закрываться.
# Для большинства случаев значение директивы следует задавать как On.
KeepAlive On

# Директива MaxKeepAliveRequests ограничивает число запросов, 
# разрешенных для одного соединения, когда KeepAlive включен. 
# Если установлено значение 0, неограниченные запросы будут разрешены. 
# Рекомендуется сохранять для этого параметра высокое значение для 
# максимальной производительности сервера.
MaxKeepAliveRequests 100

# Директива KeepAliveTimeout задает время в секундах удержания соединения активным
# в ожидании запроса клиента, т.е. максимальное время простоя активного соединения.
#
# Если активное соединение простаивает в течении этого времени (нет повторного
# запроса от того же клиента), то оно будет закрыто.
#
# Добавляя постфикс ms, можно также установить время ожидания в миллисекундах. 
# После получения запроса применяется значение времени ожидания, указанное в директиве Timeout.
#
# Если для KeepAliveTimeout задано высокое значение, это может 
# привести к проблемам с производительностью на сильно загруженных серверах. 
# Чем выше время ожидания, тем больше серверных процессов будут 
# заняты в ожидании соединений с незанятыми клиентами.
KeepAliveTimeout 5


# Директивы User и Group задают имя пользователя и имя группы пользователя от
# имени которых Apache будет обрабатывать запрошенные клиентом файлы и ресурсы.
#
# Если у вас PHP работает как модуль Apache, то php файлы будут обрабатываться от
# имени указанных User и Group. Учитывайте это при настройке прав на каталоги сайта.
#
# В стандартной инсталляции в Ubuntu Apache работает в однопользовательском
# режиме от имени указанных здесь User и Group. Если вы хотите что бы Apache
# обрабатывал виртуальные хосты от имени разных пользователей, то для этого нужно
# установить Apache модуль libapache2-mpm-itk
# из репозитория [universe] Ubuntu. После этого вы можете в виртуальном хосте директивой
# AssignUserId назначить USER GROUP конкретно для данного виртуального хоста.
# Context:    virtual host
# Syntax:     AssignUserID user-id group-id
# <IfModule mpm_itk_module>
# 	AssignUserId USER GROUP
# </IfModule>
User ${APACHE_RUN_USER}
Group ${APACHE_RUN_GROUP}

# Эта директива разрешает поиск DNS, так что имена хостов могут быть 
# зарегистрированы (и переданы в CGI / SSI в REMOTE_HOST)
# Другими словами, эта директива определяет, выполнять ли поиск имени хоста по IP-адресу клиента 
# или только фиксировать их IP-адреса, например, www.apache.org (включено) или 204.62.129.132 (отключено).
#
# Без надобности лучше не включать, т.к. если включить, то Apache будет для
# каждого клиента выполнять как минимум один обратный DNS запрос на определение
# доменного имени клиента на основе его IP, что увеличит нагрузку на сервер и
# время обработки запроса.
HostnameLookups Off

# Директива ErrorLog устанавливает имя файла, в который сервер будет 
# регистрировать любые ошибки, с которыми он сталкивается.
# Если путь к файлу не является абсолютным, предполагается, что он относится к ServerRoot.
#
# Если вы не укажете эту директиву в своем конфиге виртуального хоста, где можно
# тоже задать свой файл лога ошибок, то тогда Apache будет писать сообщения об
# ошибках вашего виртуального хоста в общий лог-файл указанный здесь.
# Если вы указали свой ErrorLog для виртуального хоста, то ошибки этого
# виртуального хоста уже не будут писаться в общий лог, указанный здесь.
ErrorLog ${APACHE_LOG_DIR}/error.log

# Директива LogLevel регулирует подробность сообщений, 
# записанных в журналах ошибок (см. Директиву ErrorLog).
# Доступны следующие уровни в порядке убывания значимости:
# emerg  - Авария - система неработоспособна.
# alert  - Предупреждение. Действие должно быть принято немедленно.
# crit   - Критическое состояние.
# error  - Ошибка
# warn   - Предупреждение
# notice - Уведомление
# info   - Информация
# debug  - Отладка
# trace1, trace2,... trace 8 - Трассировка сообщений
LogLevel warn

# Загрузка конфигурации сервера
# Указанный путь к файлу может быть абсолютным или относительным к каталогу ServerRoot
#
# Подключение конфигураций модулей
IncludeOptional mods-enabled/*.load
IncludeOptional mods-enabled/*.conf

# Загрузка конфигурации сервера
# Указанный путь к файлу может быть абсолютным или относительным к каталогу ServerRoot
#
# Подключение конфигураций портов
Include ports.conf

# В этой секции представлено несколько блоков директив <Directory>, которые
# в целях безопасности выполняют ограничения и разрешения доступа к каталогом
# файловой системы.
#
# Данная секция директив задана здесь по умолчанию при стандартной установке
# Apache в Ubuntu и обеспечивает минимально необходимые меры по настройке
# безопасности web сервера.
#
# Общая логика задания директив здесь такая: вначале выполняют запрет на обращение
# из браузера ко всем файлам и каталогам в Ubuntu, а затем уже открывают разрешения
# только конкретным каталогам и файлам в файловой системе Ubuntu.
#
# Заданные здесь по умолчанию ограничения и разрешения могут быть переопределены вами
# как здесь (глобально), так и в ваших конфигах виртуальных хостов.
#
# В общем случае можно порекомендовать оставить здесь только блок директив запрета
# для обращений к корню файловой системы, а все остальные, разрешающие блоки вынести
# от сюда в конфиги ваших виртуальных хостов.
<Directory />
    # Блок устанавливает запрет на доступ из браузера ко всем файлам и каталогам,
    # через запрет на доступ к корню файловой системы Ubuntu
    
    # Options
    # Директива Options определяет, доступные опции web сервера в данном каталоге
    # Context:    server config, virtual host, directory, .htaccess
    # Default:    Options FollowSymlinks
    # FollowSymLinks - разрешает серверу открывать символьные ссылки
    Options FollowSymLinks
    
	# AllowOverride - определяет типы директив, разрешенные в файлах .htaccess
	#
    # НЕ читать файлы .htaccess в локальных директориях:
    AllowOverride None
    
	# Директива Require проверяет, авторизован ли аутентифицированный пользователь поставщиком авторизации.
	#
    # Запрет доступа для всех:
    Require all denied
</Directory>

# Директива AccessFileName устанавливает имя (только имя) файла, который Apache
# будет искать в каждом каталоге сайта. Этот файл используется для директив
# конфигурации уровня каталога сайта (Context: .htaccess).
AccessFileName .htaccess

# Блок кода в директиве FilesMatch устанавливает запрет доступа к файлам вида
# .htaccess и .htpasswd веб-клиентам:
<FilesMatch "^\.ht">
	Require all denied
</FilesMatch>


# Директива LogFormat задает формат строк лога доступа (CustomLog) и имя этого
# формата для использования его в директиве CustomLog,
# которая позволяет задать отдельный пользовательский лог файл обращений для
# вашего виртуального хоста, если вы решите вести этот лог отдельно от общего
# лога виртуальных хостов.
# Обычно нет необходимости изменять заданные здесь значения.
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %O" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# Загрузка конфигурации сервера
# Указанный путь к файлу может быть абсолютным или относительным к каталогу ServerRoot
#
# Подключение дополнительных конфигураций
IncludeOptional conf-enabled/*.conf

# Загрузка конфигурации сервера
# Указанный путь к файлу может быть абсолютным или относительным к каталогу ServerRoot
#
# Подключение конфигураций виртуальных хостов
IncludeOptional sites-enabled/*.conf

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
